Q: What is Aspect?
A: A module which has a set of APIs providing cross-cutting requirements. For example, a logging module would be
called AOP aspect for logging. An application can have any number of aspects depending on the requirement.
In Spring AOP, aspects are implemented using regular classes (the schema-based approach) or regular classes
annotated with the @Aspect annotation (@AspectJ style).

Q: What is the difference between concern and cross-cutting concern in Spring AOP?
A: Concern: Concern is behavior which we want to have in a module of an application. Concern may be defined as a
functionality we want to implement. Issues in which we are interested define our concerns.

Cross-cutting concern: It's a concern which is applicable throughout the application and it affects the entire
application. e.g. logging , security and data transfer are the concerns which are needed in almost every module of
an application, hence are cross-cutting concerns.

Q: What is Join point?
A: This represents a point in your application where you can plug-in AOP aspect. You can also say, it is the actual place in the application where an action will be taken using Spring AOP framework.

Q: What is Advice?
A: This is the actual action to be taken either before or after the method execution. This is actual piece of code that is invoked during program execution by Spring AOP framework.

Q: What is Pointcut?
A: This is a set of one or more joinpoints where an advice should be executed. You can specify pointcuts using expressions or patterns as we will see in our AOP examples.

Q: What is Introduction?
A: An introduction allows you to add new methods or attributes to existing classes.

Q: What is Target object?
A: The object being advised by one or more aspects, this object will always be a proxy object. Also referred to as the advised object.

Q: What is Weaving?
A: Weaving is the process of linking aspects with other application types or objects to create an advised object.

Q: What are the different points where weaving can be applied?
A: Weaving can be done at compile time, load time, or at runtime.

Q: What are the types of advice?
A: Spring aspects can work with five kinds of advice mentioned below:

before: Run advice before the a method execution.

after: Run advice after the a method execution regardless of its outcome.

after-returning: Run advice after the a method execution only if method completes successfully.

after-throwing: Run advice after the a method execution only if method exits by throwing an exception.

around: Run advice before and after the advised method is invoked.

Q: What is XML Schema based aspect implementation?
A: Aspects are implemented using regular classes along with XML based configuration.

Q: What is @AspectJ? based aspect implementation?
A: @AspectJ refers to a style of declaring aspects as regular Java classes annotated with Java 5 annotations.